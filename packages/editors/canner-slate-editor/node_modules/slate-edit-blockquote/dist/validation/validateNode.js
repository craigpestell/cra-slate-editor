'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slate = require('slate');

/**
 * Return a validateNode function for blockquotes
 */
function validateNode(opts) {
    return function (node) {
        return containBlocks(opts, node);
    };
}

/**
 *  Ensures that blockquotes always contain blocks.
 */

function containBlocks(opts, node) {
    if (node.type !== opts.type) {
        return undefined;
    }

    var toWrap = node.nodes.filter(function (n) {
        return n.kind !== 'block';
    });

    if (toWrap.isEmpty()) {
        return undefined;
    }

    return function (change) {
        // Wrap text/inline nodes in default block
        var wrapper = _slate.Block.create({
            type: opts.typeDefault,
            nodes: []
        });

        change.insertNodeByKey(node.key, 0, wrapper,
        // Be careful of Slate's core schema removing inlines or blocks when
        // a block contains a mix of them.
        { normalize: false });

        toWrap.forEach(function (child, index) {
            var isLast = index === toWrap.size - 1;
            change.moveNodeByKey(child.key, wrapper.key, index, {
                normalize: isLast
            });
        });

        return change;
    };
}

exports.default = validateNode;